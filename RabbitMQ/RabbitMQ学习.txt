docker run --privileged=true -d -p 5672:5672 -p 15672:15672 -p 4369:4369 -p 25672:25672 --name myrabbitmq --hostname=myrabbitmqhost -v /usr/local/rabbitmq/data:/var/lib/rabbitmq -v /usr/local/rabbitmq/conf:/etc/rabbitmq -v /usr/local/rabbitmq/log:/var/log/rabbitmq --restart=always -e RABBITMQ_DEFAULT_VHOST=my_vhost -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.10-management

以上是rabbitmq在docker上面的启动，包含挂载配置，日志，数据
具体配置看这里：https://www.cnblogs.com/yang5726685/p/15797001.html


rabbitmq消费消息是通过事件驱动的

交换机类型
	direct：所有消息发送到交换机指定的队列，用key来标识不同队列绑定
	fanout：所有消息发送到交换机知道的所有队列
		（一个生产者发布的消息，可以让多个消费者都接收到。实现发布订阅）
	topic：模糊匹配key，标识key有自己的规则，在direct的基础上可以模糊匹配key标识
	headers：绑定时需要给arguments指定一个字典的实例，根据字典中的{"x-match","all/any"}
		如果是{"x-match","all"}，发送消息的时候，带的参数列表必须和arguments的参数一致，才能发送到队列中,
		如果是{"x-match","any"}，发送消息的时候，带的参数列表只需要匹配arguments一个参数就能发送到队列中了


生产者消息确认模式：确认消息是否正常发送：
	事务模式：
		1、channel.TxSelect()//开启事务模式
		2、channel.TxCommit()//提交
		3、channel.TxRollback()//回滚
	发布者确认:
		1、channel.ConfirmSelect()：开启确认模式
		2、channel.WaitForConfirms()：一条或多条确认，正常返回true，否则返回false
		     channel.WaitForConfirmsOrDie：所有消息都成功就正常执行，否则抛异常


消费者确认模式：确认消息是否正常消费
	手动确认：1、信道处理消息的方法参数autoAck指定为false
		2、在处理消息的事件中，当操作正常执行完，就执行
			channel.BasicAck(e.DeliveryTag,false),指定可以删除这条消息了
		否则执行channel.BasicReject(e.DeliveryTag,true),吧消息重新写入队列
	自动确认：信道处理消息的方法参数autoAck指定为true



docker集群配置：
1、在多个不同服务器上创建容器，确保所有/usr/local/rabbitmq/data下面的.erlang.cookie文件内容一样
2、首先创建一个默认的容器，吧hosts内容复制出来。在粘贴给其他所有服务器的/usr/local/rabbitmq/hosts里面
3、进入容器里面关联节点
	1：docker exec -it 7e4 bash
	2：rabbitmqctl cluster_status可以查看状态里的节点名称
	3：rabbitmqctl stop_app停止当前容器
	4：rabbitmqctl join_cluster rabbit@node01 关联到节点node01
	5：rabbitmqctl start_app启动当前容器
  	4：rabbitmqctl set_policy -p / ha-all "^" '{"ha-mode":"all","ha-sync-mode":"automatic"}' 实现镜像集群，高可用,在任意一个		容器中执行
	5：详细操作节点看文档

docker run --privileged=true -d -p 5672:5672 -p 15672:15672 -p 4369:4369 -p 25672:25672 --name myrabbitmq --hostname=node01 -v /usr/local/rabbitmq/data:/var/lib/rabbitmq -v /usr/local/rabbitmq/conf:/etc/rabbitmq -v /usr/local/rabbitmq/log:/var/log/rabbitmq -v /usr/local/rabbitmq/hosts:/etc/hosts --restart=always -e RABBITMQ_DEFAULT_VHOST=my_vhost -e RABBITMQ_ERLANG_COOKIE='rabbit_mq' -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.10-management

docker run --privileged=true -d -p 5672:5672 -p 15672:15672 -p 4369:4369 -p 25672:25672 --name myrabbitmq --hostname=node02 -v /usr/local/rabbitmq/data:/var/lib/rabbitmq -v /usr/local/rabbitmq/conf:/etc/rabbitmq -v /usr/local/rabbitmq/log:/var/log/rabbitmq -v /usr/local/rabbitmq/hosts:/etc/hosts --restart=always -e RABBITMQ_DEFAULT_VHOST=my_vhost -e RABBITMQ_ERLANG_COOKIE='rabbit_mq' -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.10-management

docker run --privileged=true -d -p 5672:5672 -p 15672:15672 -p 4369:4369 -p 25672:25672 --name myrabbitmq --hostname=node03 -v /usr/local/rabbitmq/data:/var/lib/rabbitmq -v /usr/local/rabbitmq/conf:/etc/rabbitmq -v /usr/local/rabbitmq/log:/var/log/rabbitmq -v /usr/local/rabbitmq/hosts:/etc/hosts --restart=always -e RABBITMQ_DEFAULT_VHOST=my_vhost -e RABBITMQ_ERLANG_COOKIE='rabbit_mq' -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.10-management



