1、创建型设计模式：
2、行为型设计模式：
3、结构型设计模式：解决类与类之间的关系
	横向：组合，聚合，关联，依赖
	纵向：继承，实现
	1、适配器模式：让不能一起使用的类可以一起使用
		新建一个类，包一层，达到适配。尽量使用组合，当然继承也可以
	2、代理模式：给摸一个对象创建代理对象，并且代理对象控制对原有对象的一切引用，可以扩展公共逻辑，		不能扩展业务逻辑
		新建一个类，包一层，达到代理。写法和适配器相同。
	3、装饰器模式：把原有对象经过层层装饰，扩展新的功能，组合加继承实现
		添加一个装饰器基类，组合+继承包装起来，后续添加功能，实现装饰器基类就行了
	
4、行为型设计模式：解决对象与行为的分离
	1、观察者模式：当对象存在一对多的关系时，对象修改时，自动通知其他依赖与他的对象
		通过事件，委托，面向对象思想，都能实现。发布订阅
	2、责任链模式：实现行为的无限封装转移，把不属于自己的行为抛给上端
	3、模板方法模式：一个抽象类定义了一个模板，它的子类可以复用，可以重写

5、创建型设计模式：解决对象的创建问题
	1、单例模式：整个进程只有一个实例
		双判断加锁，或者静态构造实现
	2、原型模式：快速创建重复对象，保证性能。基于内存拷贝
6、建造者模式：通过多个简单对象，一步步构建出复杂对象。建造者负责建造，管理者负责管理建造
7、简单工厂：创建一个类，负责创建其他类的实例。被创建的类通常有一个公共父类
8、工厂方法：简单工厂基础上，工厂有一个基类，所有工厂都继承这个基类
	
	